##language:zh
#pragma section-numbers off
||'''status'''|| 校对 || Lizzie || 完成度100%||

[[TableOfContents]]

##startInc

= PCS1 交互环境之命令行 =
== 概述 ==
Python命令行，又称为Python Shell，是默认的Python交互环境。

== 使用 ==
===  进入Python Shell ===
若在Windows下，假设已经安装好Python了，也设置好相应环境变量。若在GNU/Linux下，通常情况是已经安装好Python了，默认安装在/usr/bin/python下，该路径已经放进你的shell搜索路径中。

打开Windows的命令行或GNU/Linux的终端，输入python，即可进入Python交互式环境。

attachment:PCS1-1.png

进入后，可以编写代码，调试，测试及查看相关帮助。若所做工作完成，退出命令行，可以使用Ctrl+z+Enter（Windows下）或Ctrl+D（GNU/Linux下）以0值退出（就是说，没有什么错误，正常退出）。如果这没有起作用，可以输入以下命令退出：“import sys; sys.exit()”。

=== 使用交互环境 ===
进入Python Shell后如上图所示，下面具体介绍如何使用该环境。

Python解释器根据主提示符来执行，主提示符通常标识为三个大于号（“>>> ”）；继续的部分被称为从属提示符，由三个点标识（“... ”）。在第一行之前，解释器打印欢迎信息、版本号和授权提示：
{{{
Python 2.5.1 (r251:54863, Mar  7 2008, 04:10:12) 
[GCC 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 
}}}输入多行结构时需要从属提示符了。例如，下面这个 if 语句：
{{{
>>> sayhi = True
>>> if sayhi:
...     print 'hi~python!'
... else:
...     print 'say nothing!'
... 
hi~python!
}}}

错误处理。若在调试使用过程中，有错误发生时，解释器打印一个错误信息，栈跟踪器及出错位置等，便于修改。
{{{
>>> if sayhi:
...     print 'hi~python!'
... else:
... 
  File "<stdin>", line 4
    
    ^
IndentationError: expected an indented block
>>> import Mysqldb
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named Mysqldb
>>> 
}}}

若在主提示符或附属提示符输入中断符（Control-c，抛出一个 keyboardinterrupt 异常，它可以被try句截获）就会取消当前输入，回到主命令行。

在Python Shell中可以很方便的查看Python文档，包括类型、类库、模块等等的使用资料。这些都是非常有用的。通过help("obj")就可以看到obj的帮助信息，就像系统Shell中的man帮助一样，提供了非常详细的资料。

== 小结 ==
本文讲述了最基本的Python命令行使用方式，并描述了如何进入、使用、退出交互环境。这是非常简易的，很多情况下可以先在这里做些代码测试，通过后再进行脚本编辑。

##endInc


== 练习 ==
##设计实用练习,保证每个练习都可以扩展出去
 1. Python是解释执行的，那么什么是解释执行呢？和其他语言（Java，C等）的执行方式有什么区别？

== 相关参考 ==
 * [http://doc.chinahtml.com/Manual/Python/tut/node4.html 使用Python解释器]
 
----
-- Lizzie  [[DateTime(2008-05-24T14:00:00Z)]] 
[[PageComment2]]
