#pragma section-numbers off

||status|| 校对 || ZoomQuiet; 100%||

[[TableOfContents]]

##startInc
= PCS301 Karrigell =
'''安心小推车'''

== 概述 ==
##http://wiki.woodpecker.org.cn/moin/KarriGell
##简单介绍Karrigell是什么, 特点, 和其他框架不同的地方.

Karrigel是一个易用的Python Web应用框架,使用方式清晰直观:
 * 独立于任何数据库,ORM和模板引擎,也可以让开发人员选择不同的编码风格. 
 * 内置有一个功能强大的web服务器
 * 内置一个纯Python的对象型数据库PyDbLite(之前是Gadfly,再之前是buzhug).
  * 访问地址: http://quentel.pierre.free.fr/PyDbLite/index.html
  * 精巧地址: http://bit.ly/4ebSc8
 * 可以通过配置来与其它Web服务器(如Apache,Xitami,LightTPD,Ngnix等等)一起工作;还可以结合Python的其它数据库(sqlite, mySql, PostGreSQL, ZODB, 等) 接口来创建数据库应用程序.
 * 有内置的session处理
 * 有认证机制
 * 是多语言支持的(从2.1开始)
 * 自带模板处理功能(Cheetah)



== 使用 ==
故事CDay/KDays 都是选择了Karrigell进行 Web 应用组织的,这里精要的指出基于Karrigell 进行Web 应用开发的基本形式:

 下面是“Hello world”程序使用的5种不同的编码方式::
  * Python 脚本(文件:hello.py)
{{{#!python
print "Hello, world !"
}}}
  * Karrigell 服务脚本 (文件:hello.ks)
{{{#!python	
def index():
    print "Hello, world !"
}}}
  * Python嵌HTML (文件hello.hip)
{{{
"Hello, world !"
}}}
  * HTML嵌Python (文件:hello.pih)
{{{
Hello, world !
}}}
  * CGI 脚本 (文件:hello.py 在目录:cgi-bin)
{{{#!python 
print "Content-type: text/html"
print
print "Hello, world !"
}}}
 
=== 小实例 ===
 如果要在页面中打印出0到9的数字序列::
如果要想像这样写一些Python代码的话,例如打印0到9的数字序列：
  * Python 脚本(文件:squares.py)
{{{#!python
print "<h1>Squares</h1>"
for i in range(10):
    print "%s :<b>%s</b>" %(i,i*i)
}}}
  * Karrigell 服务脚本 (文件:squares.ks)
{{{#!python	
def index():
    print "<h1>Squares</h1>"
    for i in range(10):
        print "%s :<b>%s</b>" %(i,i*i)
}}}
  * Python嵌HTML (squares.hip)
{{{
"<h1>Squares</h1>"
for i in range(10):
    "%s :<b>%s</b>" %(i,i*i)
}}}
  * HTML嵌Python (文件:squares.pih)
{{{
<h1>Squares</h1>
<%
for i in range(10):
    print "%s :<b>%s</b>" %(i,i*i)
%>
}}}
  * CGI 脚本 (文件:squares.py 在目录:cgi-bin)
{{{#!python 
print 'Content-type: text/html'
print
print "<h1>Squares</h1>"
for i in range(10):
    print "%s :<b>%s</b>" %(i,i*i)
}}}

=== 小结 ===
 总之可以任意选择::
  * 可以使用普通的Python脚本
  * Karrigell服务脚本是一种Python脚本,它的每一个函式都匹配一个不同的URL：`foo.ks/bar`匹配foo.ks脚本中的bar()函式(如果没有指定函式,默认使用index()函式)
  * Python嵌HTML(HTML inside Python)是另一种写Python脚本的方式,在运行时当遇到print语句就会把要输出的字符串发送给客户端浏览器
  * HTML嵌Python(Python inside HTML)是一种非常像ASP,JSP,PHP的写法,Python写在HTML页面<的% %>标记中
  * 还可以直接使用CGI脚本:参见Python标准文档的`cgi module章节`

 表单处置::
  * Python代码在一个包含HTTP环境,表单字段,有自定义异常的命名空间下运行. 当一个表单包括字段`<INPUT name="myfield">`,它的值可以在脚本中使用`_myfield`来得到. 
 身份认证和Session::
  * 可以在脚本中使用两个叫做Authentication和Session的函式来处理. Authentication的第一个参数是一个测试函式,用来检查是否接受输入的`AUTH_USER和AUTH_PASSWORD`. Session()用来初始化一个session对象并设置或读取它的属性值或者得到一个session. 
 文件包含::
  `Include(file_or_script)`函式在当前脚本插入脚本或者文件的输出结果；例如它可用在页头或者页尾. 

=== 实作 ===
 HYRY Studio::
  * 访问地址: http://hyry.dip.jp/index.py
  * 精巧地址: http://bit.ly/2hfbkQ
  * 是一位在日本的朋友,自个儿独立创建的综合个人网站,可以在首页看到网站的发展历程(このサイトの技術と開発履歴),全部使用Karrigell 架构!
  * 其中还独立开发有:HYRY Blog
   * 访问地址: http://hyry.dip.jp/blogt.py?catlog=Python学习
   * 精巧地址: http://bit.ly/2qgnkh

== 问题 ==
Karrigell 自带的发布服务运行简单,零配置,在网站开发/或是运营初期完全不用通过 CGI/fastCGI/SCGI/WSGI 等等接口和专业Web 服务器绑定,使用自个儿就成; 但是,问题在于,总是要开个命令行来启动,关闭命令行窗口,服务也就关闭了,那么如何方便的将 Karrigell 应用作为系统服务进行发布呢?

 * M$ Windows 下面? ~甭琢磨了，不会轻易让你这么玩的,,,
 * Unix 下面? ~ 太太自然了，和一切服务一样！伪造成服务类的脚本来启动就好！
 
 以FreeBSD中为例,说明配置步骤::
  1. 创建启动脚本(比如说叫:runK.sh):{{{
#!/bin/sh
## 先进入对应目录
cd /path/to/Karrigell
## 使用 daemon 命令来包裹并记录 Karrigell的运行 pid
/usr/sbin/daemon -p /var/run/karrigell.pid /usr/local/bin/python Karrigell.py 2>/var/log/K.log &

exit  0
}}}
  1. 在 `/usr/local/etc/rc.d` 中创建 rcNG 脚本(比如说叫:karrigell.sh){{{
#!/bin/sh
#
# PROVIDE: karrigell
# REQUIRE: DAEMON
# KEYWORD: shutdown
#
# DO NOT CHANGE THESE DEFAULT VALUES HERE
# SET THEM IN THE /etc/rc.conf FILE
#
karrigell_enable=${karrigell_enable-"YES"}
karrigell_flags=${karrigell_flags-""}
karrigell_pidfile="/var/run/karrigell.pid"
## 指向的pid 和启动脚本中声明的要一致

. /etc/rc.subr

name="karrigell"
rcvar=`set_rcvar`
command="/path/to/u/runK.sh"
## 使用绝对路径声明启运脚本 
procname="/usr/local/bin/python"
## 声明运行的环境,用绝对路径说明Python 的运行环境

load_rc_config $name
pidfile="${karrigell_pidfile}"
start_cmd="echo \"Starting ${name}.\"; /usr/bin/nice -5 ${command} ${karrigell_flags} ${command_args}"

run_rc_command "$1"
}}}  
  1. 最后在`/etc/rc.conf` 中追加{{{
## 打开rcNG Karrigell 识别
karrigell_enable = "YES"
}}}
  * 齐了!现在可以象普通服务一样进行标准的服务开启和关闭了:{{{
# /usr/local/etc/rc.d/karrigell start
# /usr/local/etc/rc.d/karrigell stop
}}}


== 探讨 ==
Karrigell 可以说是为了最简单和自然的进行轻型单一功能型网站开发,而创建的框架,关注的是简单的开发和调试,而不是高性能的数据库操作和网络响应; 那么,我们真的不能用Karrigell 来架设高负荷的网站了?

 高性能化Karrigell::
  1. 用mod_wsgi 来提升性能:
   * How to use Karrigell with mod_wsgi.
    * 访问地址: http://code.google.com/p/modwsgi/wiki/IntegrationWithKarrigell
    * 精巧地址: http://bit.ly/40AJd
   * 如何让Karrigell 和 mod_wsgi 一同工作,就描述了Apache 的WSGI模块如何令Karrigell 应用成倍的提高响应速度的探索;
  1. 如果反感Apache 的臃肿,那么:
   * Karrigell + PyProcessing,Very good and Strong!
    * 访问地址: http://wiki.woodpecker.org.cn/moin/KarrigellWithPyProcessingVeryGoodStrong
    * 精巧地址: http://bit.ly/1HvKDU
   * 可以直接定制Karrigell服务脚本,引入多线程机制从而获得50倍的提速!(注意,是指在FreeBSD 环境中,在M$ Windows 环境中因为没有真正的多线程支持环境,是无法轻易作到这点的,,,)
  1. 进一步的,读者也可以尝试使用 Stackless Python 来启动Karrigell,在不改动任何一行代码的情况下也可能获得速度的提升;
  1. 再进一步的,也可以尝试使用 Psyco/PyRex 等等脚本增强支持来提高速度(参考`Python 资源索引 Py应用扩展`一节)
 
== 小结 ==
由于Karrigell 出现的比较早,网站中散见有各种程度的实际使用体验,建议读者进一步参考:

 Karrigell 区别于其它平台的不同在于::
     * "Karrigell学习"我为什么选择了Karrigell - limodou的学习记录
      * 访问地址: http://www.donews.net/limodou/archive/2005/04/23/347349.aspx
      * 精巧地址: http://bit.ly/1ZodzQ
     * Python 下的轻型web framework - limodou的学习记录
      * 访问地址: http://www.donews.net/limodou/archive/2005/03/14/302380.aspx
      * 精巧地址: http://bit.ly/37X6NY

 更多有关学习 Karrigell 的记录::
 ''来自ChumpKlutz(朽木)原创翻译''
     * Karrigell官方文档中文版
      * 访问地址: http://blog.csdn.net/ChumpKlutz/category/243254.aspx
      * 精巧地址:  http://bit.ly/4DWPHf
     * Karrigell Web 开发入门系列
      * 访问地址: http://blog.csdn.net/ChumpKlutz/archive/2007/09/12/1781990.aspx
      * 精巧地址:  http://bit.ly/3ADgnA
     * 这两份翻译的PDF版可到这里下载
      * 访问地址: http://code.google.com/p/gopython/downloads/list
      * 精巧地址: http://bit.ly/tODOJ



##endInc
-- 清风  [[DateTime(2008-04-25T14:33:00Z)]] 
