##language:zh
#pragma section-numbers off

##草稿|校对|正式
||'''status'''|| 校对 || liz,ZoomQuiet || 完成度:100%||


[[TableOfContents]]

##startInc
= PCS402 XML =
~ 让电脑理解网页的技术

== XML的来源 ==
XML源自标准通用标记语言（Standard Generalized Markup Language，SGML），SGML是一种通用的文档结构描述的符号化语言，主要是用来定义文献模型的逻辑和物理结构，但是由于其过于复杂和臃肿，只能够在大型企业和学术界使用，无法得到大规模应用。随后，于90年代提出的HTML技术得到了很大的发展，但由于HTML是面向表现的标记语言，而且结构固定，难以扩展，缺乏必要的语义信息，不适合用于信息交互。为了克服HTML和SGML的弊端，1996年W3C专家组对SGML进行裁剪，形成SGML的精简子集，这就是现在我们所知的XML。

== XML概念 ==
XML全称EXtensible Markup Language，是一种用于描述数据文档中数据的组织和安排的结构的一种规范。
[http://www.xml.org xml.org]通过以下陈述定义XML：
 * XML is a family of technologies／一系列技术族
 * XML is a method for putting structured data in a text file／一种用普通文本存放结构化数据的方法
 * XML is license-free, platform-independent and well-supported／自由许可证，平台独立，支持性好
 * XML looks a bit like HTML, but isn't HTML／看起来像HTML，但不是HTML
 * XML is new, but not that new／新的，但不是完全新的东西
 * XML is verbose, but that is not a problem／很详细，注重细节，但这不是问题
 * XML is text, but isn't meant to be read／是文本，但并不意味着可读
XML也具有如下特性：
 * Extensibility／可扩展性：XML让使用者根据需要自行定义标签。
 * Structure／结构化：XML能够描述各种复杂的文档结构。
 * Validation／验证：XML可以根据DTD/XML Schema对文件进行结构确认。

== XML和HTML ==
如上所述，XML看起来像HTML，但决不是HTML，通过下面这个例子比较下两者的不同。
假如现在要表示出一PC的硬件配置信息，分别用HTML和XML表示为：
{{{
HTML表示
<html>
  <body>
       <p>2200 MHz Pentium Iv
with 256K internal cache, 512K external cache, 256MB standard RAM, 1024MB max. RAM</p>
      </body>
</html>
XML表示
<pcinfo>
  <processor>
     <type>Pentium Iv</type>
     <speed>2200</speed>
     <intcache>256</intcache>
  </processor>
  <extcache>512</exctache>
  <ram>
     <standard>256</standard>
     <max>1024</max>
  </ram>
</pcinfo>
}}}可以看到用HTML表示的那些数据仅仅是些字符串，没有什么语义信息，而XML除了具体有数据值还有标签，即该数据值表示的语义信息。进一步的，我们可以看出：`HTML是侧重于表示数据，即数据看起来象什么；XML是描述数据，即数据是什么`。XML的优势在于它对于同一内容可以有多种表示形式，内容也独立于应用，其数据可以像数据库一样查询和操作。注意：XML的标签里包含的是纯信息，单独查看XML文件的内容并没有任何意义，需要应用程序根据特定需求读取，处理，显示，即需要应用程序赋予它语义信息。
但是，`XML并不取代HTML`，因为它们的设计目标不同，XML用于描述信息，而HTML用于显示信息。这是本质区别。

== XML语法介绍 ==
下面的例子中描述了通讯录信息的XML表示形式：
{{{
＜ ? xml version＝“1.0” encoding＝”GB2312” standalone＝”no”?＞
＜!DOCTYPE 联系人 SYSTEM”fclml.dtd”＞
＜?xml—stylesheet type＝”text／css” href＝“mystyle.css”?＞
    ＜联系人＞
         ＜姓名 曾用名=“张山”＞张三＜／姓名＞
         ＜用户号＞001＜／用户号＞
         ＜单位＞扬州大学＜／单位＞
         ＜EMAIL＞zhang＠aaa．com＜／EMAIL＞
         ＜电话＞ (0514)2345678 ＜／电话＞
         ＜地址＞
             ＜街道＞江阳中路36号＜／街道＞
             ＜城市＞扬州市＜／城市＞
             ＜省份＞江苏＜／省份＞
         ＜／地址＞
    ＜／联系人＞
}}}可以看到，这个XML文档中依次有以下几个组成部分组成：
=== XML声明 ===
XML文档以XML声明作为开始，它向解析器提供了关于文档的基本信息，必须出现在文件最前端。
{{{
<? xml version＝“1.0” encoding＝”GB2312” standalone＝”no”?>
       版本号              编码方式           是否为独立文档,值为no表示引用外部DTD文档
}}}
=== 处理指令(PI) ===
处理指令(Process Instruction)是指示外部处理或应用程序的命令或宏。
格式为：<?target  instruction?>target是一个在应用程序阅读XML时访问的外部应用程序，目的是执行某些计算；instruction是指要提供给外部应用应用程序的命令。如前面的例子中，使用PI链接文档，组成样式表。
{{{
＜?xml—stylesheet type＝”text／css” href＝“mystyle.css”?＞
}}}
=== 标签 ===
XML的标签是对文档内容进行描述的元数据，形式上是用一对尖括号括起来的，有开始标签(例如<姓名>)和结束标签(例如</姓名>)，这些标签可以由用户自己创建。

=== 元素 ===
元素是开始标签、结束标签以及位于二者之间的所有内容。 如：<person>John</person>，其中“person”被称为元素名或标签名。以下四点需要注意：
 * 元素可以包含子元素，即可以嵌套。
 * 元素是区分大小写，如<Name>…</name>开始标签和结束标签是不匹配的。
 * 元素不能交叉重叠，如<p><b>…</p></b>是不对的。
 * 一些特殊字符不得出现在元素中，若一定需要表示特殊字符，可以使用转义序列，如下：
|| 字符 || 名称 || 转义序列 ||
|| > || Gt || {{{&gt;}}} ||
|| < || Lt || {{{&lt;}}} ||
|| “ || Quot || {{{&quot;}}} ||
|| ‘ || Apos || {{{&apos;}}} ||
|| & || Amp || {{{&amp;}}} ||
元素的命名要遵循以下规则：
 * 元素名可以包含字母，数字和其它符号
 * 名字不能用数字或标点符号开头
 * 元素名不能用xml (或XML，或 Xml等等)开头
 * 元素名不能包含空格

XML文档必须包含在一个单一元素中，这个单一元素称为根元素，它包含文档中所有文本和所有其它元素。在上面的示例中，XML文档包含在一个单一元素＜联系人＞中。不包含单一根元素的文档不管该文档可能包含什么信息，XML解析器都会拒绝它。

在XML文档中，是不能省去任何结束标签的。

如果一个元素根本不包含标签，则称为空元素；在XML文档的空元素中，可以把结束斜杠放在开始标签中。下面两个图像元素对于XML解析器来说是等价的：<img src="../img/c.gif"></img>和<img src="../img/c.gif" />

=== 属性 ===
它是一个元素的开始标记中的名称-值对。 如＜姓名 曾用名=“张山”＞张三＜／姓名＞，曾用名=“张山” 是 <姓名> 元素的属性。一个元素可以带任意数量的属性，且元素的属性不能嵌套，一个元素不能有两个相同属性名的属性，其属性值必须用引号括住。

=== 注释 ===
XML的注释是以<!--开头 ，以-->结束，描述文档的功能,类似于程序设计语言的注释。但是它不能出现在前言之前，不能包在标签之中，但可以包住标签，也不能使用“--”字符串，更不能嵌套使用。

=== 命名空间 ===
XML是一种用来定义我们自己的语言而定义数据的工具。在定义自己语言的过程中，总是可能面对在Internet上定义标签或元素陷入命名冲突。XML命名空间 (Namespaces)在1999年1月14日成为W3C的推荐标准，它的主要目的在于解决XML元素或属性名称的冲突问题。XML使用URI(Uniform Resource Identifier)的引用作为Namespace，只要将URI加到元素或属性名称的前面，就能使名称具有惟一性。如：
{{{
<description>
    <{http://www.w3.org/TR/xhtml1}head>
        <{http://www.w3.org/TR/xhtml1}title>Book
        </ {http://www.w3.org/TR/xhtml1}title>
    </{http://www.w3.org/TR/xhtml1}head>   
</description>
}}}
可以写成：
{{{
<description xmlns:ht=" http://www.w3.org/TR/xhtml1” >
      <ht:head>
      <ht:title>Book</ht:title>
      </ht:head>   
</description>
}}}命名空间的声明由xmlns:prefix组成。声明固定为xmlns，之后用'：'隔开，prefix不能包含xml的字样。名称空间定义中的字符串仅仅是字符串，上例中，也可以定义xmlns:addr=“yzu"，这也是有效的。
默认的命名空间采用xmlns=“someuri”来表示没有prefix的元素使用此命名空间。
{{{
<library xmlns=”http://www.w3c.org”>
      <book>xml bible</book>
      <author name=“abcd”>……</author>    
</library>
}}}
如果没有默认的命名空间，没有prefix的元素不属于任何命名空间。
命名空间的作用域仅限于命名空间声明的元素以及子孙元素。
{{{
   <library>
       <bk:book xmlns:bk=“http://www.w3.org”>
            <bk:title>…</bk:title>   
    </bk:book>   
    <bk:description>…</bk:description>    # 这个是错误的，因为bk已经超出作用域了
</library>
}}}

== DTD和XML Schema ==
文档类型定义(Document Type Definition)，简称DTD。DTD定义可以在普通XML文档中出现的元素、这些元素出现的次序、它们可以如何相互嵌套以及 XML文档结构的其它详细信息。DTD是最初的XML规范的一部分，但是DTD语法不同于的XML语法。
DTD的一般写法是：<!DOCTYPE 根元素名[…[内容声明]…]>
元素和属性是两个主要声明：
{{{
<! ELEMENT element_name content_spec >
            元素名称      元素內容的类型
<! ATTLIST element_name attribute_name type default >
          所属元素的名称    属性的名称    类型  指默认值
}}}
DTD的局限有以下几点：
 * DTD本身不是XML格式，无法使用标准的编程方式进行DTD维护
 * DTD不支持命名空间
 * DTD仅支持有限的数据类型，在大多数应用环境下表示能力不足
 * 无法重复使用先前声明的元素或属性
 * 不易描述元素出现次数

由于DTD的局限性，进一步提出了XML Schema。XML Schema是W3C的推荐标准，于2001年5月正式发布，经过数年的大规模讨论和开发，最终成为全球公认的XML环境下的首选建模工具，已经基本取代了DTD的地位。
XML Schema正式定义XML实例文件(instance document)的结构，即验证XML实例文件是否合法；也定义了出现在XML文件中的元素和属性的数据类型及结构。
XML Schema预定义的元素和属性在名称空间(http://www.w3.org/2001/XMLSchema 精巧地址：http://bit.ly/1cK2ff)中定义，主要包括以下一些基本元素：
 * Schema：XML Schema的根元素
 * SimpleType：定义数据类型
 * ComplexType:声明XML元素的结构
 * Element：声明XML子元素
 * Attribute：声明XML元素属性
XML Schema中定义的数据类型称为简单类型，它很好地规范了XML文档的文本内容的形式和语义。而且因为XML Schema本身是XML文档，其定义的数据类型可以直接在XML文档中使用。
XML Schema中的简单类型可以分为三种：原子类型、列表类型和联合类型。
XML Schema内置了40多种简单类型，常见的有：string（字符串）、Boolean（布尔类型）、URI reference（URI引用）、float（浮点数字）、double（双精度浮点数）、ID（身份号）、decimal（十进制数字）、 ENTITY（实体）和TimeDutation（时间数据）等。

== 工具和资源 ==
 XML开发环境::
  * Altova XMLSPY(商业软件,可视化，支持拖拽)
   * 访问地址: http://www.altova.com/download.html 
   * 精巧地址: http://bit.ly/JlXgU
  * Liquid XML Studio 2008 (自由软件)  
   * 访问地址: http://www.liquid-technologies.com/Download.aspx
   * 精巧地址: http://bit.ly/dQqia
 XML文档::
  * W3C官方XML教程:
   * 访问地址: http://www.w3.org/TR/xml/
   * 精巧地址: http://bit.ly/hzdab
  * XML Schema ~ 提供大量XML相关的编辑、解析工具
   * 访问地址: http://www.w3.org/XML/Schema
   * 精巧地址: http://bit.ly/2PssD4
  * 中国万维网联盟(W3CHINA) ~ 关于XML的专业性中文技术站点
   * 访问地址: http://www.xml.org.cn/
   * 精巧地址: http://bit.ly/1CPto0
  * XML问题专栏
   * 访问地址: http://www.ibm.com/developerworks/cn/xml/x-matters/
   * 精巧地址: http://bit.ly/47Z8w1
   
== 小结 ==
  IBM从60年代就开始发展的 GML,到 1986年标准化成SGML(ISO 8879),虽然好用,但是太复杂;
  
  随着互联网的发展,在1989 由CERN（Conseil Europeen pour la Recherche Nucleaire）简化成 HTML,随着Internet 的发展,HTML快速发展到4.0,但是有失控的趋势,而且面对爆炸式的网页增长,根本没有什么好办法来让电脑理解网页内容,从而更加聪明的帮助入门寻找可用的资料;
  
  所以 1996年合理简化SGML提出XML,1998年,成为W3C标准(XML1.0);
  
  但是,人们发现XML配套的技术和软件平台太少,网络中不断增长的还是对于电脑来讲一片混沌的HTML页面,于是在 2000年底,XML向HTML妥协,基于HTML4.0.1 发布了 XHMTL1.0,将HTML改进成吻合XML规范的格式,从部分方面解决了电脑理解网页的问题.
  
  嗯嗯嗯,这个围绕着网页的故事还在继续,而XML,已经跨出了网页的领域,在数据挖掘,分布式计算,语义网研究等等方面不断的快速成长着,就行者来看,XML可以简单理解成:
   1. 结构化数据的容器标准;
   1. 数据处理的结构化标准;
  再简单的说,XML就是当前最方便和通用的数据交换格式! 凡是程序间/系统间/网站间的数据交互,优先考虑使用XML准没错!
  

##endInc

----
'''反馈'''

创建 by -- ::-- ["lizzie"] [[[DateTime(2008-10-01T13:20:26Z)]]]
||<^>[[PageComment2]]||<^>[:/PageCommentData:PageCommentData]''||
