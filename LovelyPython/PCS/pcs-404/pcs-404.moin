##language:zh
#pragma section-numbers off

##草稿|校对|正式
||'''status'''|| 校对 || ZoomQuiet || 完成度:95%||


[[TableOfContents]]

##startInc
= PCS404 代码重构浅说  =
`~ 重构是必要的浪费`

== 概述 ==
Refactoring ~ 修改内部结构(设计)而不影响外部行为
 * 对代码和软件的重构,对于用户是没有意义的,所以是种浪费;
 * 但是,对程序员,代码和软件的重构,是绝对必要的!因为可以:
  * 加深对程序的理解
  * 使程序更加容易被理解
  * 找到隐藏的BUG
  * 提高开发速度
  * 不知不觉中完成对软件的设计增进
  * 从而神奇的提高代码的可维护性/复用性/健壮性... 

== 使用 ==
首先推荐本专门的好书:

重构--改善既有代码的设计
 * attachment:Refactoring.jpg
 * 豆瓣介绍:http://www.douban.com/subject/1229923/
 * 精巧地址:http://bit.ly/2mvGyj

其实在前面的 CDay/KDay 故事中,针对同一功能的实现,先后使用不同的思路和代码在保持对外接口不变的情况下,反复使用更精简/明了/易读的代码重新实现,这本身就是重构!

{{{#!python
import os
export = ""
for root, dirs, files in os.walk('/media/cdrom0'):
  export+="\n %s;%s;%s" % (root,dirs,files)
open('mycd2.cdc', 'w').write(export)
}}}

演变成:
{{{#!python
import os
export = []
for root, dirs, files in os.walk('/media/cdrom0'):
    export.append("\n %s;%s;%s" % (root,dirs,files))
open('mycd2.cdc', 'w').write(''.join(export))
}}}

又变成:
{{{#!python
import os
def cdWalker(cdrom,cdcfile):
    export = ""
    for root, dirs, files in os.walk(cdrom):
        export+="\n %s;%s;%s" % (root,dirs,files)
    open(cdcfile, 'w').write(export)
cdWalker('/media/cdrom0','cd1.cdc')
}}}

就是根据经验或是直觉,将具有"坏味道"的代码使用更舒服的代码不断改进!

{{{注意::
所谓代码的"坏味道",就是程序员们在多年各种开发活动中总结出来的,
令代码的扩展和维护趋向混乱和不可控的态势,,,
具体的参考 "重构--改善既有代码的设计" 一书中详细介绍的几十种"坏味道"及其应对方法;)
}}}

== 问题 ==
 什么时候应该进行重构?::
  * 这个问题随着我们的经验积累,答案会增殖的!
  * 所以,可以从反向进行解答:`什么时候不应该进行重构?`
   1. 现有的程序无法运行,此时应该是重写程序,而不是重构
   1. 程序到了最后的交付期限

 重构活动中的难题::
  当前可以确认的,无法轻快的当场进行重构的难题有以下方面:
   * 关系数据库与面向对象编程的问题:在对象模型和数据库模型之间插入一个分隔层,这就可以隔离两个模型各自的变化.升级某一模型时无需同时升级上述的分隔层即可.这样的分隔层会增加系统复杂度.但是能增加灵活度.
   * 修改接口的问题:修改已发布的接口,因为已发布的接口会供外部人员(其它公司)使用,因此,修改接口会导致引用接口的其它程序不修改程序就无法运行.修改接口的最好的办法是增加一个新的接口,让旧接口调用新接口.这样原来的程序就不用修改了.对于接口的另一个建议是心尽量不要发布接口.

== 探讨 ==
由于重构法则在长期探索中形成了各种模式,进而已经被包含在一些高级IDE环境中!

 对于Python::
  Bicycle Repair Man 可以自动的对指定代码进行指定模式的自动化重构
  * 官方网站: http://bicyclerepair.sourceforge.net/
  * 精巧地址: http://bit.ly/fuAGL

进一步的,请参考 维基百科:'''软件重构'''
 * 访问地址: http://zh.wikipedia.org/wiki/软件重构
 * 精巧地址: http://bit.ly/1CRg9I
 
== 小结 ==
  重构是最简单易行的提升代码品质的手段,不过,其实施和管理方式是属于 XP~极限编程思想,不是我们日常学校里念叨的"瀑布式开发流程";重构,要求的是就地,随时进行的勇气和技巧以及热情!

  只要我们非常看重我们自个儿写出来的代码,期望这些代码可以长久的反复的,稳健的运行/使用/分享下去;那么就开始重构吧!

    
##endInc

## 练习::
## 可能的话
## 设计实用练习,保证每个练习都可以扩展出去

----
'''反馈'''

创建 by -- ::@USER@ [@TIME@]
||<^>[[PageComment2]]||<^>[:/PageCommentData:PageCommentData]''||
